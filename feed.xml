<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ji-hunc.github.io/</id><title>최지훈</title><subtitle>최지훈 기록 블로그</subtitle> <updated>2022-10-08T01:26:57+09:00</updated> <author> <name>Jihun Choi</name> <uri>https://ji-hunc.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ji-hunc.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://ji-hunc.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Jihun Choi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Kotlin 문법을 알아보자 1</title><link href="https://ji-hunc.github.io/posts/Kotlin1/" rel="alternate" type="text/html" title="Kotlin 문법을 알아보자 1" /><published>2022-08-15T15:00:00+09:00</published> <updated>2022-08-15T15:00:00+09:00</updated> <id>https://ji-hunc.github.io/posts/Kotlin1/</id> <content src="https://ji-hunc.github.io/posts/Kotlin1/" /> <author> <name>jihun</name> </author> <category term="kotlin" /> <category term="basic" /> <summary> 변수 코틀린의 변수는 자바와 달리 var, val 두 가지만 존재한다. var은 variable로 변수를 의미하고, val은 value로 상수를 의미한다. 자바의 final과 같다. var a: Int = 1 val b: String = 2 // 선언할 때 자바와 달리 변수명이 먼저오고 타입이온다. 변수명: 타입 var c = 3 val d = 4 // 타입 선언을 하지 않아도 자동으로 캐스팅된다. var e : Int var f // error // 변수를 선언만 하고 할당은 하지 않을 때, 타입은 선언해야한다. // var f 와 같은경우는 타입을 선언하지 않았기 때문에 오류이다. 함수 코틀린의 함수는 무엇을 리턴하던지 상관없이 항상 fun으로 시작한다. 변수와 마찬가... </summary> </entry> <entry><title>C++ set container 정리</title><link href="https://ji-hunc.github.io/posts/C++set/" rel="alternate" type="text/html" title="C++ set container 정리" /><published>2022-06-07T00:55:00+09:00</published> <updated>2022-06-07T00:55:00+09:00</updated> <id>https://ji-hunc.github.io/posts/C++set/</id> <content src="https://ji-hunc.github.io/posts/C++set/" /> <author> <name>jihun</name> </author> <category term="C++" /> <category term="STL" /> <summary> C++ STL Container set 집합은 중복을 허용하지 않는 컨테이너이다. insert시에 내부적으로는 BST로 자동 정렬되어 저장된다. bidirectional iterator를 가지고 있다. 헤더파일 #include &amp;lt;set&amp;gt; 쉽게 Container의 원소를 출력해주는 함수 template &amp;lt;class T&amp;gt; void print_container(T container) { auto it = container.begin(); for (; it!=container.end(); it++) { cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; " "; } cout &amp;lt;&amp;lt; endl; } 생성 및 초기화 set&amp;... </summary> </entry> <entry><title>Getting Started</title><link href="https://ji-hunc.github.io/posts/getting-statred/" rel="alternate" type="text/html" title="Getting Started" /><published>2019-08-09T21:55:00+09:00</published> <updated>2022-06-07T02:00:11+09:00</updated> <id>https://ji-hunc.github.io/posts/getting-statred/</id> <content src="https://ji-hunc.github.io/posts/getting-statred/" /> <author> <name>cotes</name> </author> <category term="Blogging" /> <category term="Tutorial" /> <summary> Prerequisites Follow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed. Installation Creating a New Site There are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking ... </summary> </entry> <entry><title>Text and Typography</title><link href="https://ji-hunc.github.io/posts/example/" rel="alternate" type="text/html" title="Text and Typography" /><published>2019-08-08T12:33:00+09:00</published> <updated>2019-08-08T12:33:00+09:00</updated> <id>https://ji-hunc.github.io/posts/example/</id> <content src="https://ji-hunc.github.io/posts/example/" /> <author> <name>cotes</name> </author> <category term="Blogging" /> <category term="Demo" /> <summary> This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography. Titles H1 - heading H2 - heading H3 - heading H4 - heading Paragraph I wandered lonely as a cloud That floats on high o’er vales and hills, When all at once I saw a crowd, A host, of golden daffodils; Beside the lake, beneath the t... </summary> </entry> </feed>
